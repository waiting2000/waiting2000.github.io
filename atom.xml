<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>当年</title>
  
  <subtitle>tzc的Blog</subtitle>
  <link href="http://waiting2000.github.io/atom.xml" rel="self"/>
  
  <link href="http://waiting2000.github.io/"/>
  <updated>2021-03-22T07:25:11.169Z</updated>
  <id>http://waiting2000.github.io/</id>
  
  <author>
    <name>Tzc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spark-WordCount案例（Hamlet）</title>
    <link href="http://waiting2000.github.io/2021/03/22/spark-wordcount-an-li-hamlet/xue-xi-bi-ji/"/>
    <id>http://waiting2000.github.io/2021/03/22/spark-wordcount-an-li-hamlet/xue-xi-bi-ji/</id>
    <published>2021-03-22T07:23:23.000Z</published>
    <updated>2021-03-22T07:25:11.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark-WordCount案例（Hamlet）"><a href="#Spark-WordCount案例（Hamlet）" class="headerlink" title="Spark-WordCount案例（Hamlet）"></a>Spark-WordCount案例（Hamlet）</h1><h1 id="一、所需文件"><a href="#一、所需文件" class="headerlink" title="一、所需文件"></a>一、所需文件</h1><p>Hamlet原文地址：<a href="https://github.com/waiting2000/doc/blob/main/Hamlet.txt">Hamlet</a></p><p>停用词原文地址：<a href="https://github.com/waiting2000/doc/blob/main/stopword.txt">停用词</a></p><h1 id="二、新建Scala-class，选择“Object”"><a href="#二、新建Scala-class，选择“Object”" class="headerlink" title="二、新建Scala.class，选择“Object”"></a>二、新建Scala.class，选择“Object”</h1><p>所需jar包：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span>RDD<span class="token keyword">import</span> scala<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Source</code></pre><h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><h2 id="第一步：创建SparkConf对象，设置Spark应用的配置信息"><a href="#第一步：创建SparkConf对象，设置Spark应用的配置信息" class="headerlink" title="第一步：创建SparkConf对象，设置Spark应用的配置信息"></a>第一步：创建SparkConf对象，设置Spark应用的配置信息</h2><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> sparkConf<span class="token operator">:</span> SparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span>sparkConf<span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"homework"</span><span class="token punctuation">)</span>sparkConf<span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span></code></pre><p>或</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> sparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre><p>setAppName(“local”)，设置为local，则代表在本地运行</p><p>setMaster(“”)，可以设置Spark应用程序要连接的Spark集群的master节点的URL</p><h2 id="第二步：创建SparkContext对象"><a href="#第二步：创建SparkContext对象" class="headerlink" title="第二步：创建SparkContext对象"></a>第二步：创建SparkContext对象</h2><p>在Spark中，SparkContext是Spark所有功能的一个入口，主要作用是：包括初始化Spark应用程序所需的一些核心组件，包括调度器（DAGSchedule、TaskScheduler），还回去Spark Master节点上进行注册等。</p><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> sc<span class="token operator">:</span> SparkContext <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>sparkConf<span class="token punctuation">)</span></code></pre><h2 id="第三步：针对输入源（hdfs文件、本地文件等）创建一个初始的RDD"><a href="#第三步：针对输入源（hdfs文件、本地文件等）创建一个初始的RDD" class="headerlink" title="第三步：针对输入源（hdfs文件、本地文件等）创建一个初始的RDD"></a>第三步：针对输入源（hdfs文件、本地文件等）创建一个初始的RDD</h2><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> linesRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span>textFile<span class="token punctuation">(</span><span class="token string">"--文件路径--"</span><span class="token punctuation">)</span></code></pre><h2 id="第四步：对初始RDD进行transformation操作，调用RDD的map、flatmap等算子执行"><a href="#第四步：对初始RDD进行transformation操作，调用RDD的map、flatmap等算子执行" class="headerlink" title="第四步：对初始RDD进行transformation操作，调用RDD的map、flatmap等算子执行"></a>第四步：对初始RDD进行transformation操作，调用RDD的map、flatmap等算子执行</h2><h3 id="1、将每一行拆分成单个的单词（运用flatmap算子）"><a href="#1、将每一行拆分成单个的单词（运用flatmap算子）" class="headerlink" title="1、将每一行拆分成单个的单词（运用flatmap算子）"></a>1、将每一行拆分成单个的单词（运用flatmap算子）</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> wordsRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span> <span class="token operator">=</span> linesRDD  <span class="token punctuation">.</span>flatMap<span class="token punctuation">(</span>oneLine <span class="token keyword">=></span> oneLine<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="2、将每一个单词映射为（单词，1）的格式，即（key-value"><a href="#2、将每一个单词映射为（单词，1）的格式，即（key-value" class="headerlink" title="2、将每一个单词映射为（单词，1）的格式，即（key,value)"></a>2、将每一个单词映射为（单词，1）的格式，即（key,value)</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> wordAndOneRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> wordsRDD<span class="token punctuation">.</span>map<span class="token punctuation">(</span>word <span class="token keyword">=></span> <span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3、以单词为key，统计每个单词出现的次数，运用reduceByKey算子"><a href="#3、以单词为key，统计每个单词出现的次数，运用reduceByKey算子" class="headerlink" title="3、以单词为key，统计每个单词出现的次数，运用reduceByKey算子"></a>3、以单词为key，统计每个单词出现的次数，运用reduceByKey算子</h3><pre class=" language-scala"><code class="language-scala"><span class="token keyword">val</span> wordCountRDD<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> wordAndOneRDD  <span class="token punctuation">.</span>reduceByKey<span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span> <span class="token keyword">=></span> v1 <span class="token operator">+</span> v2<span class="token punctuation">)</span></code></pre><h2 id="第五步：Action操作"><a href="#第五步：Action操作" class="headerlink" title="第五步：Action操作"></a>第五步：Action操作</h2><pre class=" language-scala"><code class="language-scala"><span class="token comment" spellcheck="true">//在控制台打印结果</span>orderedWordCountRDD<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>println<span class="token punctuation">)</span>orderedWordCountRDD<span class="token punctuation">.</span>saveAsTextFile<span class="token punctuation">(</span><span class="token string">"--结果保存路径--"</span><span class="token punctuation">)</span>、<span class="token comment" spellcheck="true">//关闭sc，释放空间</span>sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="至此，已完成最简单的对于文本Hamlet的WordCount。"><a href="#至此，已完成最简单的对于文本Hamlet的WordCount。" class="headerlink" title="至此，已完成最简单的对于文本Hamlet的WordCount。"></a>至此，已完成最简单的对于文本Hamlet的WordCount。</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Spark-WordCount案例（Hamlet）&quot;&gt;&lt;a href=&quot;#Spark-WordCount案例（Hamlet）&quot; class=&quot;headerlink&quot; title=&quot;Spark-WordCount案例（Hamlet）&quot;&gt;&lt;/a&gt;Spark-WordC</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://waiting2000.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo+Github搭建博客</title>
    <link href="http://waiting2000.github.io/2021/01/24/hexo-github-da-jian-bo-ke/xue-xi-bi-ji/"/>
    <id>http://waiting2000.github.io/2021/01/24/hexo-github-da-jian-bo-ke/xue-xi-bi-ji/</id>
    <published>2021-01-24T07:23:40.000Z</published>
    <updated>2021-03-10T09:51:45.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页，并且将生成的网页可以托管在GitHub上，成本低，还无需定期维护。</p><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><p>在安装Hexo前，需安装以下应用程序：</p><ul><li><p><strong><a href="https://nodejs.org/en/">Node.js</a>（Node.js版本≥10.13，建议使用Node.js 12.0及以上版本）</strong></p></li><li><p><strong><a href="http://git-scm.com/">Git</a></strong></p></li></ul><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>Node.js 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。对于中国大陆地区用户，可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p><p>其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li><li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a></li></ul><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>所有准备工作完成后，即可使用npm安装Hexo（<strong>建议使用git-bash</strong>）</p><p>在这里，推荐两种安装方式：</p><p><strong>全局安装：</strong></p><pre><code>$ npm install -g hexo-cli</code></pre><p><strong>局部安装：</strong></p><p>通过命令行，切换到想要安装的位置，例如：<code>cd B</code></p><p>接着，进行安装：</p><pre><code>$ npm install hexo</code></pre><p>安装完后，可使用 <code>hexo -v</code> 查看版本</p><p><img src="https://raw.githubusercontent.com/waiting2000/pic/main/img/20210127112259.png" alt="image-20210127112252767"></p><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><p>安装完Hexo，开始正式搭建博客</p><p>为避免不必要的问题，建议全部命令使用git-bash来实行</p><h2 id="1-创建静态博客"><a href="#1-创建静态博客" class="headerlink" title="1.创建静态博客"></a>1.创建静态博客</h2><p>因博客内容在本地由文件夹存放，故用命令切换到自己想要存放的位置，此处，我自己新建了一个磁盘B盘</p><p><img src="https://raw.githubusercontent.com/waiting2000/pic/main/img/20210127164713.png" alt="image-20210127164713164"></p><p>然后，进行初始化</p><pre><code>$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;</code></pre><!--==folder为自定义的文件名==--><p>初始化完成后，文件夹的目录如下：</p><p><img src="https://raw.githubusercontent.com/waiting2000/pic/main/img/20210127164959.png" alt="image-20210127164959831"></p><ul><li>node_modules：依赖包</li><li>public：存放生成的页面</li><li>scaffolds：文章模版文件夹</li><li>source：资源文件夹</li><li>themes：主题文件夹</li><li>_config.yml：博客的配置文件</li></ul><p>至此，一个简单的博客就创建好了。我们可以在命令行输入<code>hexo s</code>，启动本地服务页面。</p><p><img src="https://raw.githubusercontent.com/waiting2000/pic/main/img/20210127222847.png" alt="image-20210127222847124"></p><p>然后打开浏览器输入<a href="http://localhost:4000，浏览页面。">http://localhost:4000，浏览页面。</a></p><p><img src="https://raw.githubusercontent.com/waiting2000/pic/main/img/20210127223101.png" alt="image-20210127223101491"></p><h2 id="2-部署到GitHub"><a href="#2-部署到GitHub" class="headerlink" title="2.部署到GitHub"></a>2.部署到GitHub</h2><h3 id="在GitHub上创建特定仓库（提前注册好GitHub账号）"><a href="#在GitHub上创建特定仓库（提前注册好GitHub账号）" class="headerlink" title="在GitHub上创建特定仓库（提前注册好GitHub账号）"></a>在GitHub上创建特定仓库（提前注册好GitHub账号）</h3><p>点击右上角“新建仓库”</p><p><img src="https://raw.githubusercontent.com/waiting2000/pic/main/img/20210130224317.png" alt="image-20210130224110163"></p><p>==特别注意，仓库名称必须是：GitHub用户名.github.io==</p><p><img src="https://raw.githubusercontent.com/waiting2000/pic/main/img/20210130224955.png" alt="image-20210130224955052"></p><h3 id="生成SSH秘钥添加到GitHub"><a href="#生成SSH秘钥添加到GitHub" class="headerlink" title="生成SSH秘钥添加到GitHub"></a>生成SSH秘钥添加到GitHub</h3><p>这个步骤是为了使用户使用git-bash（git）时，可以远程连接上github。</p><p>首先，打开git-bash，使用命令</p><pre><code>git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><p>此处，“<code>yourname</code>“是github的用户名，“<code>youremail</code>”是注册github时输入的邮箱。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo介绍&quot;&gt;&lt;a href=&quot;#Hexo介绍&quot; class=&quot;headerlink&quot; title=&quot;Hexo介绍&quot;&gt;&lt;/a&gt;Hexo介绍&lt;/h1&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 &lt;a href=&quot;http://daringfi</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://waiting2000.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://waiting2000.github.io/2021/01/22/hello-world/xue-xi-bi-ji/"/>
    <id>http://waiting2000.github.io/2021/01/22/hello-world/xue-xi-bi-ji/</id>
    <published>2021-01-22T14:20:28.643Z</published>
    <updated>2021-01-24T12:35:36.497Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://waiting2000.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
</feed>
